pkg load image

original = imread('Im_Semruido.jpg');
subplot(5,4,1)
original = double(original);
imshow(original,[0,255])
title('Imagem Original')
 
%Ruido Uniforme
ruidoUniforme = unifrnd(0,80,size(original));
imagemUniforme = original + ruidoUniforme;
subplot(5,3,2)
imshow(imagemUniforme, [0,255])
title('Ruido Uniforme')
 
 
%Ruido Gaussiano
ruidoGaussiano = normrnd(5,30,size(original));
imagemGaussiana = original + ruidoGaussiano;

%Forma direta de inserir ruído gaussiano
%imagemGaussiana = imnoise(original,'gaussian')

subplot(5,3,3)
imshow(imagemGaussiana, [0,255])
title('Ruido Gaussiano')
 
%Ruido Exponencial
ruidoExponencial = exprnd(5,size(original));
imagemExponencial = original + ruidoExponencial;
subplot(5,3,4)
imshow(imagemExponencial, [0,255])
title('Ruido Exponencial')

 
%Ruido Gama
ruidoGama = gamrnd(1,8,size(original));
imagemGama = original + ruidoGama;
subplot(5,3,5)
imshow(imagemGama, [0,255])
title('Ruido Gama')
 
%Ruido Sal e Pimenta
ImagemSaltAndPepper = original;
ruidoSaltAndPepper = rand(size(original));
Ppimenta = 0.05;
Psal = 0.95;
pepper = find(ruidoSaltAndPepper <= Ppimenta);
ImagemSaltAndPepper(pepper) = 0;
salt = find(ruidoSaltAndPepper>=Psal);
ImagemSaltAndPepper(salt) = 255;
subplot(5,3,6)
imshow(ImagemSaltAndPepper, [0,255])
title('Ruido Sal e Pimenta')

%Forma direta de calcular ruido Sal e Pimenta
%ImagemSaltAndPepper = imnoise(original,'salt & pepper');


%Ruido Speckle
imagemSpeckle = imnoise(I, 'speckle');
subplot(5,3,7)
imshow(ImagemSaltAndPepper, [0,255])
title('Ruido Speckle')


%Ruido Rayleigh
ruidoRayLeigh = raylrnd(20,size(original));
imagemRayleigh = original + ruidoRayLeigh;
subplot(5,3,8)
imshow(imagemRayleigh, [0,255])
title('Ruido Rayleigh')


 %Filtros%Filtro de Media 3x3 media3 = fspecial("average",3);imagem_media3 = imfilter(imagemUniforme,media3); %testar com cada um dos ruídossubplot(5,3,3)imshow(imagem_media3, [0,255])title('Filtro de Media 3x3')%Filtro de Media Geometrica 3x3I = imagemUniforme; %testar com cada um dos ruídostam = 3;%Preenchimento com zeroscolZero = zeros(size(I,1),(tam-1)/2);linZero = zeros((tam-1)/2,size(I,2)+(tam-1)); Iz = [colZero I colZero];Iz = [linZero;Iz;linZero];  imagem_geometrica3 = uint8(zeros(size(imagemUniforme)));for l = 1:size(I,1)    for c = 1:size(I,2)        janela = Iz(l : l+(tam-1) , c : c+(tam-1));        imagem_geometrica3(l,c)=(prod(janela(:)))^(1/(tam*tam));    endendsubplot(5,3,4)imshow(imagem_media3, [0,255])title('Filtro de Media Geometrica 3x3')%Filtro de Mediana 3x3imagem_mediana3 = medfilt2(imagemUniforme); %Por default a janela é 3x3				            %testar com cada um dos ruídossubplot(5,3,5)imshow(imagem_media3, [0,255])title('Filtro de Mediana 3x3')%Filtro de Máximofunction Ifiltrada = FiltroMax(I,tam) %testar com cada um dos ruídos
 
%Preenchimento com zeros
colZero = zeros(size(I,1),(tam-1)/2);
linZero = zeros((tam-1)/2,size(I,2)+(tam-1));
 
Iz = [colZero I colZero];
Iz = [linZero;Iz;linZero];
 
%imshow(Iz, [0,255])
 
 
for l = 1:size(I,1)
    for c = 1:size(I,2)
        janela = Iz(l : l+(tam-1) , c : c+(tam-1));
        Ifiltrada(l,c)=max(janela(:));
    end
end%Filtro de mínimofunction Ifiltrada = FiltroMin(I,tam)  %testar com cada um dos ruídos
 
%Preenchimento com zeros
colZero = zeros(size(I,1),(tam-1)/2);
linZero = zeros((tam-1)/2,size(I,2)+(tam-1));
 
Iz = [colZero I colZero];
Iz = [linZero;Iz;linZero];
 
%imshow(Iz, [0,255])
 
 
for l = 1:size(I,1)
    for c = 1:size(I,2)
        janela = Iz(l : l+(tam-1) , c : c+(tam-1));
        Ifiltrada(l,c)=min(janela(:));
    end
end

%Como chamar as funções de filtro de máximo e mínimo
 
%Filtro Maximo
imagemMax = FiltroMax(imagemUniforme,3); %testar com cada um dos ruídos
subplot(5,3,10)
imshow(imagemMax, [0,255])
title('Filtro Maximo')

%Filtro Minimo
ImagemMin = FiltroMin(imagemUniforme,3); %testar com cada um dos ruídos
subplot(5,3,10)
imshow(ImagemMin, [0,255])
title('Filtro Minimo')